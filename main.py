from fastapi import FastAPI, Request, File, UploadFile, Form
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from model_config import MODEL_MAP
import uvicorn
from fastapi.responses import JSONResponse
from PIL import Image
import shutil
import uuid
from pathlib import Path
import time
from ultralytics import YOLO
from ultralytics.utils.plotting import colors
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import logging
import torch
import gc
from datetime import datetime
import sys
import cv2
import numpy as np
import traceback
from typing import List, Dict, Any
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_dir = Path(__file__).resolve().parent / "logs"
    log_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('app')
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', 
                                datefmt='%Y-%m-%d %H:%M:%S')
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(
        log_dir / f"app_{datetime.now().strftime('%Y%m%d')}.log", 
        encoding='utf-8'
    )
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    return logger

logger = setup_logging()

BASE_DIR = Path(__file__).resolve().parent
TMP_DIR = BASE_DIR / "tmp"
TMP_DIR.mkdir(exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤ (–∫–∞–∫ –≤ YOLO)
CLASS_COLORS = {}

def get_class_color(class_id: int) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞, –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–∫–ª—é—á–∞—è —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç"""
    if class_id not in CLASS_COLORS:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é colors() –æ—Ç YOLO
        class_color = colors(class_id, bgr=True)
        logger.info(f"üé® YOLO –≤–µ—Ä–Ω—É–ª —Ü–≤–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_id}: BGR={class_color}")
        
        # –ë–ê–ù-–õ–ò–°–¢ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π
        b, g, r = class_color[0], class_color[1], class_color[2]  # BGR
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω—è–µ–º –ª—é–±–æ–π —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π
        if (b == 0 and g == 0 and r == 0) or (b < 30 and g < 30 and r < 30):
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            class_color = (0, 0, 255)  # BGR —Ñ–æ—Ä–º–∞—Ç: (0, 0, 255) = –∫—Ä–∞—Å–Ω—ã–π
            logger.info(f"üé® –ë–ê–ù-–õ–ò–°–¢: —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_id} –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ö–†–ê–°–ù–´–ô: {class_color}")
        else:
            logger.info(f"üé® –ù–û–í–´–ô —Ü–≤–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_id}: {class_color}")
        
        CLASS_COLORS[class_id] = class_color
    else:
        logger.info(f"üé® –ò–°–ü–û–õ–¨–ó–£–Æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_id}: {CLASS_COLORS[class_id]}")
    
    return CLASS_COLORS[class_id]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –º–æ–¥–µ–ª–µ–π
MODEL_CACHE = {}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π MODEL_MAP —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
MODEL_MAP = {
    'auto_damage_united_with_third_part_yolo_model': 'auto_damage_united_with_third_part_yolo_model.pt',
    'auto_damage_yolo_first_part_model': 'auto_damage_yolo_first_part_model.pt',
    'auto_damage_yolo_second_part_model': 'auto_damage_yolo_second_part_model.pt',
    'auto_damage_yolo_third_part_model': 'auto_damage_yolo_third_part_model.pt',
    'auto_damage_yolo_united_1_2_model': 'auto_damage_yolo_united_1_2_model.pt',
    'auto_parts_full_dataset_1': 'auto_parts_full_dataset_1.pt'
}

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏
PROCESSING_TYPES = {
    'all_models': list(MODEL_MAP.keys()),
    'damage_only': [k for k in MODEL_MAP.keys() if 'damage' in k],
    'parts_only': [k for k in MODEL_MAP.keys() if 'parts' in k],
    'damage_parts': ['auto_damage_united_with_third_part_yolo_model', 'auto_parts_full_dataset_1']
}

app = FastAPI()
app.mount("/static", StaticFiles(directory="app/static"), name="static")
app.mount("/tmp", StaticFiles(directory="app/tmp"), name="tmp")

templates = Jinja2Templates(directory="app/templates")

def load_model(model_name: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—É—é"""
    try:
        if model_name in MODEL_CACHE:
            logger.info(f"üì¶ –ú–æ–¥–µ–ª—å {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞")
            return MODEL_CACHE[model_name]
        
        pt_file = BASE_DIR / "models_from_hub" / MODEL_MAP[model_name]
        if not pt_file.exists():
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {pt_file}")
            logger.error(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ models_from_hub:")
            models_dir = BASE_DIR / "models_from_hub"
            if models_dir.exists():
                for file in models_dir.iterdir():
                    logger.error(f"   - {file.name}")
            else:
                logger.error(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {models_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise FileNotFoundError(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ {pt_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}...")
        start_time = time.time()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        device = 'cpu'
        logger.info(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        model = YOLO(str(pt_file))
        model.to(device)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è CPU
        model.fuse()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è CPU
        model.eval()
        
        load_time = time.time() - start_time
        logger.info(f"‚ö° –ú–æ–¥–µ–ª—å {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f}—Å")
        
        MODEL_CACHE[model_name] = model
        return model
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}")
        logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
        return None

def optimize_image_size(image_path: Path, max_size: int = 512):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ CPU"""
    try:
        with Image.open(image_path) as img:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            width, height = img.size
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ max_size, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
            if max(width, height) > max_size:
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                if width > height:
                    new_width = max_size
                    new_height = int(height * max_size / width)
                else:
                    new_height = max_size
                    new_width = int(width * max_size / height)
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                img_resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                img_resized.save(image_path, 'JPEG', quality=80, optimize=True)
                
                logger.info(f"üîß –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path.name} –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {width}x{height} -> {new_width}x{new_height}")
            else:
                logger.info(f"üîß –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path.name} —É–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: {width}x{height}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {str(e)}")

def extract_detection_data(result, model_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ YOLO —Å –º–∞—Å–∫–∞–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    try:
        detections = []
        
        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç boxes: {hasattr(result, 'boxes')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result - —ç—Ç–æ –æ–±—ä–µ–∫—Ç Results (–Ω–µ —Å–ø–∏—Å–æ–∫)
        if hasattr(result, 'boxes') and result.boxes is not None:
            boxes = result.boxes
            logger.info(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–∫—Å–æ–≤: {len(boxes)}")
            
            if len(boxes) > 0:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–Ω–∑–æ—Ä—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                    if hasattr(boxes.xyxy, 'cpu'):
                        xyxy = boxes.xyxy.cpu().numpy()
                    else:
                        xyxy = boxes.xyxy.numpy()
                    
                    if hasattr(boxes.cls, 'cpu'):
                        classes = boxes.cls.cpu().numpy()
                    else:
                        classes = boxes.cls.numpy()
                    
                    if hasattr(boxes.conf, 'cpu'):
                        confidences = boxes.conf.cpu().numpy()
                    else:
                        confidences = boxes.conf.numpy()
                    
                    class_names = result.names
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                    masks_xy = None
                    masks_xyn = None
                    if hasattr(result, 'masks') and result.masks is not None:
                        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ (—Å–ø–∏—Å–∫–∏)
                        masks_xy = result.masks.xy  # –ø–æ–ª–∏–≥–æ–Ω—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö
                        masks_xyn = result.masks.xyn  # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
                        logger.info(f"üé≠ –ù–∞–π–¥–µ–Ω—ã –º–∞—Å–∫–∏: {len(masks_xy) if masks_xy else 0} –º–∞—Å–æ–∫")
                        if masks_xy and len(masks_xy) > 0:
                            logger.info(f"üé≠ –ü—Ä–∏–º–µ—Ä –º–∞—Å–∫–∏ [0]: —Ç–∏–ø={type(masks_xy[0])}, –¥–ª–∏–Ω–∞={len(masks_xy[0]) if hasattr(masks_xy[0], '__len__') else 'N/A'}")
                        if masks_xy and len(masks_xy) > 0:
                            sample_mask = masks_xy[0]
                            logger.info(f"üé≠ –ü—Ä–∏–º–µ—Ä –º–∞—Å–∫–∏ [0]: —Ñ–æ—Ä–º–∞={sample_mask.shape if hasattr(sample_mask, 'shape') else 'N/A'}, –ø–µ—Ä–≤—ã–µ 6 –∑–Ω–∞—á–µ–Ω–∏–π={sample_mask[:6] if hasattr(sample_mask, '__getitem__') else 'N/A'}")
                    
                    for i in range(len(boxes)):
                        class_id = int(classes[i])
                        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–∫–∞–∫ –≤ YOLO)
                        class_color = get_class_color(class_id)
                        
                        detection = {
                            'bbox': [float(x) for x in xyxy[i].tolist()],
                            'class_id': class_id,
                            'class_name': str(class_names[class_id]),
                            'confidence': float(confidences[i]),
                            'model_color': list(class_color)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –∫–ª–∞—Å—Å–∞
                        }
                        
                        logger.info(f"üé® –ö–ª–∞—Å—Å {class_id} '{class_names[class_id]}' –ø–æ–ª—É—á–∏–ª —Ü–≤–µ—Ç {list(class_color)}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        if masks_xy is not None and i < len(masks_xy):
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–∏ float
                            # masks_xy[i] - —ç—Ç–æ numpy array —Å —Ñ–æ—Ä–º–æ–π (N, 2) –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ [x, y]
                            mask_array = masks_xy[i]
                            if hasattr(mask_array, 'tolist'):
                                mask_list = mask_array.tolist()
                            else:
                                mask_list = list(mask_array)
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º [[x1,y1], [x2,y2], ...] –≤ [x1,y1,x2,y2,...]
                            detection['mask_polygon'] = [float(coord) for point in mask_list for coord in point]
                            
                            mask_norm_array = masks_xyn[i]
                            if hasattr(mask_norm_array, 'tolist'):
                                mask_norm_list = mask_norm_array.tolist()
                            else:
                                mask_norm_list = list(mask_norm_array)
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º [[x1,y1], [x2,y2], ...] –≤ [x1,y1,x2,y2,...]
                            detection['mask_polygon_normalized'] = [float(coord) for point in mask_norm_list for coord in point]
                        
                        detections.append(detection)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–∫—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}")
                    logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
                    return []
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(detections)} –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
        if detections:
            for i, det in enumerate(detections[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"  {i+1}. {det['class_name']} - {det['confidence']:.2f}")
        
        return detections
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ extract_detection_data –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}")
        logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
        return []

def combine_detection_results(results_list):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –º–∞—Å–∫–∞–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    try:
        if not results_list or len(results_list) == 0:
            return None, []
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        first_result = results_list[0]
        if not first_result:
            return None, []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        combined_img = first_result.orig_img.copy()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        all_detections = []
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        model_colors = {
            'auto_damage_united_with_third_part_yolo_model': (0, 255, 0),  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
            'auto_parts_full_dataset_1': (255, 0, 0)  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        }
        
        for result_idx, result in enumerate(results_list):
            if result is None:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result - —ç—Ç–æ –æ–±—ä–µ–∫—Ç Results (–Ω–µ —Å–ø–∏—Å–æ–∫)
            if hasattr(result, 'boxes') and result.boxes is not None:
                boxes = result.boxes
                if len(boxes) > 0:
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞
                        if hasattr(boxes.xyxy, 'cpu'):
                            xyxy = boxes.xyxy.cpu().numpy()
                        else:
                            xyxy = boxes.xyxy.numpy()
                        
                        if hasattr(boxes.cls, 'cpu'):
                            classes = boxes.cls.cpu().numpy()
                        else:
                            classes = boxes.cls.numpy()
                        
                        if hasattr(boxes.conf, 'cpu'):
                            confidences = boxes.conf.cpu().numpy()
                        else:
                            confidences = boxes.conf.numpy()
                        
                        class_names = result.names
                        
                        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                        masks_xy = None
                        if hasattr(result, 'masks') and result.masks is not None:
                            masks_xy = result.masks.xy  # –ø–æ–ª–∏–≥–æ–Ω—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö
                        
                        for i in range(len(boxes)):
                            class_id = int(classes[i])
                            # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–∫–∞–∫ –≤ YOLO)
                            class_color = get_class_color(class_id)
                            
                            detection = {
                                'bbox': [float(x) for x in xyxy[i].tolist()],
                                'class_id': class_id,
                                'class_name': str(class_names[class_id]),
                                'confidence': float(confidences[i]),
                                'model_color': list(class_color)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –∫–ª–∞—Å—Å–∞
                            }
                            
                            logger.info(f"üé® Mix –º–æ–¥–µ–ª—å: –ö–ª–∞—Å—Å {class_id} '{class_names[class_id]}' –ø–æ–ª—É—á–∏–ª —Ü–≤–µ—Ç {list(class_color)}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                            if masks_xy is not None and i < len(masks_xy):
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–∏ float
                                # masks_xy[i] - —ç—Ç–æ numpy array —Å —Ñ–æ—Ä–º–æ–π (N, 2) –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ [x, y]
                                mask_array = masks_xy[i]
                                if hasattr(mask_array, 'tolist'):
                                    mask_list = mask_array.tolist()
                                else:
                                    mask_list = list(mask_array)
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º [[x1,y1], [x2,y2], ...] –≤ [x1,y1,x2,y2,...]
                                detection['mask_polygon'] = [float(coord) for point in mask_list for coord in point]
                            
                            all_detections.append(detection)
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–∫—Å–æ–≤ –≤ combine_detection_results –¥–ª—è result_idx {result_idx}: {str(e)}")
                        logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
                        continue
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PIL –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        from PIL import Image, ImageDraw, ImageFont
        import numpy as np
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OpenCV –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PIL
        pil_img = Image.fromarray(cv2.cvtColor(combined_img, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(pil_img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.truetype("arial.ttf", 16)
        except:
            try:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.truetype("DejaVuSans.ttf", 16)
            except:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.load_default()
        
        # –†–∏—Å—É–µ–º –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        for detection in all_detections:
            bbox = detection['bbox']
            x1, y1, x2, y2 = map(int, bbox)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –º–æ–¥–µ–ª–∏
            color = detection.get('model_color', (0, 255, 0))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ä–∏—Å—É–µ–º –µ—ë
            if 'mask_polygon' in detection:
                mask_polygon = detection['mask_polygon']
                if len(mask_polygon) > 0:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è PIL
                    polygon_points = []
                    for j in range(0, len(mask_polygon), 2):
                        if j + 1 < len(mask_polygon):
                            polygon_points.append((mask_polygon[j], mask_polygon[j + 1]))
                    
                    if len(polygon_points) > 2:
                        # –†–∏—Å—É–µ–º –∑–∞–ª–∏–≤–∫—É –º–∞—Å–∫–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏
                        mask_img = Image.new('RGBA', pil_img.size, (0, 0, 0, 0))
                        mask_draw = ImageDraw.Draw(mask_img)
                        
                        # –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                        mask_draw.polygon(polygon_points, fill=(color[0], color[1], color[2], 76))  # 30% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                        
                        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        pil_img = Image.alpha_composite(pil_img.convert('RGBA'), mask_img).convert('RGB')
                        draw = ImageDraw.Draw(pil_img)
            
            # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É
            draw.rectangle([x1, y1, x2, y2], outline=color, width=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞—Å—Å–æ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            label = f"{detection['class_name']} {detection['confidence']:.2f}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            bbox_text = draw.textbbox((0, 0), label, font=font)
            text_width = bbox_text[2] - bbox_text[0]
            text_height = bbox_text[3] - bbox_text[1]
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤–∏–¥–µ–Ω
            text_x = x1
            text_y = y1 - text_height - 5
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ
            img_width, img_height = pil_img.size
            if text_y < 0:
                text_y = y2 + 5  # –ü–æ–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥ –æ–±—ä–µ–∫—Ç
            if text_x + text_width > img_width:
                text_x = img_width - text_width - 5
            if text_x < 0:
                text_x = 5
            
            # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            draw.rectangle([text_x, text_y, text_x + text_width + 5, text_y + text_height + 5], fill=color)
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            draw.text((text_x + 2, text_y + 2), label, fill=(0, 0, 0), font=font)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
        combined_img = cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2BGR)
        
        return combined_img, all_detections
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ combine_detection_results: {str(e)}")
        logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
        return None, []

@app.get("/")
async def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/process")
async def process_images(
    files: list[UploadFile] = File(...),
    model_name: str = Form(...),
    imgsz: int = Form(...),
    conf: float = Form(...),
    iou: float = Form(...)
):
    request_start = time.time()
    logger.info(f"üöÄ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò: {len(files)} —Ñ–∞–π–ª–æ–≤, imgsz={imgsz}, conf={conf}, iou={iou}")
    logger.info(f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:")
    logger.info(f"  - model_name: {model_name}")
    logger.info(f"  - imgsz: {imgsz} (—Ç–∏–ø: {type(imgsz)})")
    logger.info(f"  - conf: {conf} (—Ç–∏–ø: {type(conf)})")
    logger.info(f"  - iou: {iou} (—Ç–∏–ø: {type(iou)})")

    for i, file in enumerate(files):
        logger.info(f"  - —Ñ–∞–π–ª {i+1}: {file.filename} ({file.content_type}, {file.size} –±–∞–π—Ç)")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if model_name in PROCESSING_TYPES:
        model_names = PROCESSING_TYPES[model_name]
        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{model_name}': {len(model_names)} –º–æ–¥–µ–ª–µ–π")
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
        model_names = [model_name] if model_name in MODEL_MAP else []
        logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {model_name}")

    if not model_names:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –º–æ–¥–µ–ª—å: {model_name}")
        return JSONResponse(
            status_code=400,
            content={"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏: {model_name}"}
        )

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    session_id = str(uuid.uuid4())
    session_dir = TMP_DIR / session_id
    session_dir.mkdir(exist_ok=True)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    global CLASS_COLORS
    CLASS_COLORS.clear()
    logger.info(f"üé® –ö—ç—à —Ü–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
    
    logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        saved_file_paths = []
        logger.info(f"üíæ –ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(files)} —Ñ–∞–π–ª–æ–≤...")
        
        for i, file in enumerate(files):
            logger.info(f"üìÅ [{i+1}/{len(files)}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file.filename}")
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            contents = await file.read()
            logger.info(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file.filename}: {len(contents)} –±–∞–π—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            tmp_file_path = session_dir / file.filename
            with open(tmp_file_path, "wb") as f:
                f.write(contents)
            
            logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {tmp_file_path}")
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logger.info(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file.filename}")
            optimize_image_size(tmp_file_path, max_size=512)
            
            saved_file_paths.append(tmp_file_path)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
        results_all_models = {}
        detections_all = {}
        original_images = {}  # –ü—É—Ç–∏ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è + –¥–µ—Ç–∞–ª–∏"
        if model_name == 'damage_parts':
            logger.info("üîÑ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –¥–µ—Ç–∞–ª–µ–π")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for i, file_path in enumerate(saved_file_paths):
                filename = file_path.name
                
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
                    damage_model = 'auto_damage_united_with_third_part_yolo_model'
                    parts_model = 'auto_parts_full_dataset_1'
                    
                    damage_model_obj = load_model(damage_model)
                    parts_model_obj = load_model(parts_model)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    damage_results = damage_model_obj(str(file_path), conf=conf, iou=iou, imgsz=imgsz, verbose=False)
                    parts_results = parts_model_obj(str(file_path), conf=conf, iou=iou, imgsz=imgsz, verbose=False)
                    
                    if damage_results and parts_results:
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - damage_results –∏ parts_results —ç—Ç–æ —Å–ø–∏—Å–∫–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                        combined_img, combined_detections = combine_detection_results([damage_results[0], parts_results[0]])
                        
                        if combined_img is not None:
                            # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PNG)
                            combined_result = {
                                "original_filename": filename,
                                "result_path": f"/tmp/{session_id}/{filename}"  # –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
                            }
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            if 'combined' not in results_all_models:
                                results_all_models['combined'] = []
                            results_all_models['combined'].append(combined_result)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                            if filename not in detections_all:
                                detections_all[filename] = {}
                            detections_all[filename]['combined'] = combined_detections
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                            if filename not in original_images:
                                original_images[filename] = f"/tmp/{session_id}/{filename}"
                            
                            logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {filename}")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {filename}: {str(e)}")
                    logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
                    continue
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
            for i, mn in enumerate(model_names):
                model_start = time.time()
                logger.info(f"ü§ñ [{i+1}/{len(model_names)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏: {mn}")
                
                try:
                    model = load_model(mn)
                    inference_start = time.time()
                    logger.info(f"üîç [{i}/{len(model_names)}] {mn}: –Ω–∞—á–∞–ª–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...")
                    
                    results = model([str(p) for p in saved_file_paths], conf=conf, iou=iou, imgsz=imgsz, verbose=False)
                    inference_time = time.time() - inference_start
                    logger.info(f"‚ö° –ú–æ–¥–µ–ª—å {mn}: –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –∑–∞ {inference_time:.2f}—Å ({inference_time/len(files):.2f}—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    save_start = time.time()
                    model_results = []
                    
                    # results - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Results, –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    for j, result in enumerate(results):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                        original_filename = saved_file_paths[j].name
                        if original_filename not in original_images:
                            original_images[original_filename] = f"/tmp/{session_id}/{original_filename}"
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                        detections = extract_detection_data(result, mn)
                        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(detections)} –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è {original_filename} –º–æ–¥–µ–ª—å {mn}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ PNG —Ñ–∞–π–ª–∞)
                        model_result = {
                            "original_filename": original_filename,
                            "result_path": f"/tmp/{session_id}/{original_filename}"  # –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
                        }
                        model_results.append(model_result)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                        if detections:
                            if original_filename not in detections_all:
                                detections_all[original_filename] = {}
                            detections_all[original_filename][mn] = detections
                            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(detections)} –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è {original_filename} –º–æ–¥–µ–ª—å {mn}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è {original_filename} –º–æ–¥–µ–ª—å {mn}")
                    
                    results_all_models[mn] = model_results
                    
                    save_time = time.time() - save_start
                    model_time = time.time() - model_start
                    logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {mn}: –∏–Ω—Ñ–µ—Ä–µ–Ω—Å {inference_time:.2f}—Å, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {save_time:.2f}—Å, –≤—Å–µ–≥–æ {model_time:.2f}—Å")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ {mn}: {str(e)}")
                    logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
                    results_all_models[mn] = []
                    continue

        total_time = time.time() - request_start
        avg_time_per_model = total_time / len(model_names) if model_names else 0
        avg_time_per_image = total_time / len(files) if files else 0

        logger.info(f"üéâ –ó–ê–í–ï–†–®–ï–ù–û: {total_time:.2f}—Å")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(results_all_models)} –º–æ–¥–µ–ª–µ–π, {len(files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        logger.info(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –º–æ–¥–µ–ª—å: {avg_time_per_model:.2f}—Å")
        logger.info(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {avg_time_per_image:.2f}—Å")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–π
        logger.info(f"üìã –ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –î–ï–¢–ï–ö–¶–ò–ô:")
        logger.info(f"  - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏: {len(detections_all)}")
        for filename, models_data in detections_all.items():
            logger.info(f"  - –§–∞–π–ª {filename}:")
            for model_name, detections in models_data.items():
                logger.info(f"    - –ú–æ–¥–µ–ª—å {model_name}: {len(detections)} –¥–µ—Ç–µ–∫—Ü–∏–π")
                for i, detection in enumerate(detections[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    logger.info(f"      {i+1}. {detection.get('class_name', 'Unknown')} - {detection.get('confidence', 0):.2f}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "results": results_all_models,
            "detections": detections_all,
            "original_images": original_images,
            "processing_time": total_time,
            "models_processed": len(model_names),
            "files_processed": len(files)
        }

        return response_data

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"}
        )

@app.post("/clear_tmp")
async def clear_tmp():
    """–û—á–∏—â–∞–µ—Ç –í–°–ï –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        logger.info("üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –í–°–ï–• –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # –£–¥–∞–ª—è–µ–º –í–°–ï —Å–µ—Å—Å–∏–∏ –∏ —Ñ–∞–π–ª—ã –≤ tmp
        cleared_sessions = 0
        cleared_files = 0
        
        for item in TMP_DIR.iterdir():
            try:
                if item.is_dir():
                    shutil.rmtree(item)
                    cleared_sessions += 1
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {item.name}")
                elif item.is_file():
                    item.unlink()
                    cleared_files += 1
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {item.name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item.name}: {str(e)}")
                continue
        
        logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: {cleared_sessions}, —Ñ–∞–π–ª–æ–≤: {cleared_files}")
        return {"message": f"–û—á–∏—â–µ–Ω–æ {cleared_sessions} —Å–µ—Å—Å–∏–π –∏ {cleared_files} —Ñ–∞–π–ª–æ–≤"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"error": f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}"}
        )

@app.get("/status")
async def get_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
        cuda_available = torch.cuda.is_available()
        cuda_device_count = torch.cuda.device_count() if cuda_available else 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        tmp_files_count = sum(1 for _ in TMP_DIR.rglob('*') if _.is_file())
        tmp_sessions_count = sum(1 for _ in TMP_DIR.iterdir() if _.is_dir())
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –º–æ–¥–µ–ª–µ–π
        cached_models = list(MODEL_CACHE.keys())
        
        status_info = {
            "status": "running",
            "cuda_available": cuda_available,
            "cuda_device_count": cuda_device_count,
            "device_used": "cpu",
            "tmp_files_count": tmp_files_count,
            "tmp_sessions_count": tmp_sessions_count,
            "cached_models": cached_models,
            "available_models": list(MODEL_MAP.keys()),
            "processing_types": list(PROCESSING_TYPES.keys())
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status_info}")
        return status_info
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"}
        )

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    logger.info(f"üêç –í–µ—Ä—Å–∏—è PyTorch: {torch.__version__}")
    logger.info(f"üîß CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
    logger.info(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: CPU")
    logger.info(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 512px")
    logger.info(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {TMP_DIR}")
    logger.info(f"üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {list(PROCESSING_TYPES.keys())}")
    
    uvicorn.run(app, host="0.0.0.0", port=8000)