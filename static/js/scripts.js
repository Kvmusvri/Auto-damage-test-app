"use strict";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const MODEL_DISPLAY_NAMES = {
  'Auto_damage_united_with_third_part_yolo_model': '–ü–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç 1+2+3 —á–∞—Å—Ç–∏',
  'Auto_damage_yolo_THIRD_PART_model': '–î–∞—Ç–∞—Å–µ—Ç —Ç–æ–ª—å–∫–æ 3 —á–∞—Å—Ç—å',
  'Auto_damage_yolo_united_1_2_model': '–ü–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç 1+2 —á–∞—Å—Ç–∏',
  'Auto_damage_yolo_SECOND_PART_model': '–¢–æ–ª—å–∫–æ 2 —á–∞—Å—Ç—å',
  'Auto_damage_yolo_FIRST_PART_model': '–¢–æ–ª—å–∫–æ 1 —á–∞—Å—Ç—å'
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const dropArea = document.getElementById('dropArea');
const fileInput = document.getElementById('fileInput');
const gallery = document.getElementById('gallery');
const uploadForm = document.getElementById('uploadForm');
const confRange = document.getElementById('conf');
const confValue = document.getElementById('confValue');
const iouRange = document.getElementById('iou');
const iouValue = document.getElementById('iouValue');
const processingMessage = document.getElementById('processingMessage');
const notification = document.getElementById('notification');
const resultsContainer = document.getElementById('resultsContainer');
const startBtn = document.getElementById('startBtn');
const modal = document.getElementById('modal');
const modalImage = document.getElementById('modalImage');
const closeModal = document.getElementById('closeModal');
const closePanel = document.getElementById('closePanel');
const detectionPanel = document.getElementById('detectionPanel');
const detectionList = document.getElementById('detectionList');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let files = [];
let allFiles = [];
let currentParams = {};
let detectionData = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
let originalImages = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
let filteredImages = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
let currentModalImage = null; // –¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
let resultImages = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
  initializeEventListeners();
  initializeRangeInputs();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initializeEventListeners() {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag & drop
  initializeDragAndDrop();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const form = document.getElementById('uploadForm');
  form.addEventListener('submit', handleFormSubmit);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const modal = document.getElementById('modal');
  const closeModal = document.getElementById('closeModal');
  const detectionPanel = document.getElementById('detectionPanel');
  const closePanel = document.getElementById('closePanel');
  
  closeModal.addEventListener('click', () => {
    modal.classList.remove('active');
    currentModalImage = null; // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–π
    hiddenModalDetections.clear();
    currentModalDetections = [];
    modalDetectionColors.clear();
  });
  
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.remove('active');
      currentModalImage = null; // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–π
      hiddenModalDetections.clear();
      currentModalDetections = [];
      modalDetectionColors.clear();
    }
  });
  
  closePanel.addEventListener('click', () => {
    detectionPanel.classList.remove('active');
  });
  
  console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
function initializeRangeInputs() {
  const confSlider = document.getElementById('conf');
  const iouSlider = document.getElementById('iou');
  const confValue = document.getElementById('confValue');
  const iouValue = document.getElementById('iouValue');

  confSlider.addEventListener('input', (e) => {
    confValue.textContent = e.target.value;
  });

  iouSlider.addEventListener('input', (e) => {
    iouValue.textContent = e.target.value;
  });
}

function handleDragOver(e) {
  e.preventDefault();
}

function handleDrop(e) {
    e.preventDefault();
  const droppedFiles = Array.from(e.dataTransfer.files);
  handleFiles(droppedFiles);
}

function handleFileSelect(e) {
  const selectedFiles = Array.from(e.target.files);
  handleFiles(selectedFiles);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function handleFiles(newFiles) {
  console.log('üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:', newFiles.length);
  
  const imageFiles = newFiles.filter(file => file.type.startsWith('image/'));
  
  imageFiles.forEach(file => {
    if (!allFiles.some(existingFile => existingFile.name === file.name)) {
      allFiles.push(file);
      files.push(file);
      console.log('‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω:', file.name);
    } else {
      console.log('‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', file.name);
    }
  });
  
  updateGallery();
}

function updateGallery() {
  const gallery = document.getElementById('gallery');
  gallery.innerHTML = '';
  
  files.forEach((file, index) => {
    const wrapper = document.createElement('div');
    wrapper.className = 'gallery-wrapper';
    
    const img = document.createElement('img');
    img.src = URL.createObjectURL(file);
    img.alt = file.name;
    
    const removeBtn = document.createElement('button');
    removeBtn.className = 'remove-btn';
    removeBtn.textContent = '√ó';
    removeBtn.onclick = () => removeFile(index);
    
    wrapper.appendChild(img);
    wrapper.appendChild(removeBtn);
    gallery.appendChild(wrapper);
  });
}

function removeFile(index) {
  files.splice(index, 1);
  updateGallery();
  
  // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag & drop –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  initializeDragAndDrop();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag & drop
function initializeDragAndDrop() {
  const dropArea = document.getElementById('dropArea');
  const fileInput = document.getElementById('fileInput');
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  dropArea.removeEventListener('dragover', handleDragOver);
  dropArea.removeEventListener('drop', handleDrop);
  dropArea.removeEventListener('click', () => fileInput.click());
  fileInput.removeEventListener('change', handleFileSelect);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  dropArea.addEventListener('dragover', handleDragOver);
  dropArea.addEventListener('drop', handleDrop);
  dropArea.addEventListener('click', () => fileInput.click());
  fileInput.addEventListener('change', handleFileSelect);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
async function handleFormSubmit(e) {
    e.preventDefault();
  
  console.log('üöÄ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –§–û–†–ú–´');
  console.log('üìÅ –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', files.length);
  console.log('üìã –í—Å–µ —Ñ–∞–π–ª—ã:', allFiles.length);

  if (files.length === 0) {
    showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    return;
  }

  const startBtn = document.getElementById('startBtn');
  startBtn.disabled = true;
  startBtn.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';

  const processingMessage = document.getElementById('processingMessage');
  processingMessage.style.display = 'block';

  const formData = new FormData();
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
  files.forEach(file => {
    formData.append('files', file);
  });

  const modelName = document.getElementById('modelSelect').value;
  const imgsz = document.getElementById('imgsz').value;
  const conf = document.getElementById('conf').value;
  const iou = document.getElementById('iou').value;

  formData.append('model_name', modelName);
  formData.append('imgsz', imgsz);
  formData.append('conf', conf);
  formData.append('iou', iou);

  console.log('‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
  console.log('  - model_name:', modelName);
  console.log('  - imgsz:', imgsz);
  console.log('  - conf:', conf);
  console.log('  - iou:', iou);

  currentParams = {
    imgsz: imgsz,
    conf: conf,
    iou: iou
  };

  const requestStart = Date.now();
  console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /process...');

  try {
    const response = await fetch('/process', {
      method: 'POST',
      body: formData
    });

    const requestTime = Date.now() - requestStart;
    console.log(`üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${requestTime}–º—Å`);
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);

    const data = await response.json();
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

    if (!response.ok) {
      throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º:', Object.keys(data.results));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    detectionData = data.detections || {};
    console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–π:', detectionData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
    originalImages = data.original_images || {};

    updateResults(data.results);
    processingMessage.style.display = 'none';
    showNotification('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
    processingMessage.style.display = 'none';
    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ' + error.message);
  } finally {
    startBtn.disabled = false;
    startBtn.textContent = '–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É';
    console.log('üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'error') {
  const notification = document.getElementById('notification');
  notification.textContent = message;
  notification.style.display = 'block';
  notification.style.background = type === 'success' ? '#28a745' : '#dc3545';
  
  setTimeout(() => {
    notification.style.display = 'none';
  }, 5000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function updateResults(results) {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
  console.log('üìä –ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', results);
  
  const container = document.getElementById('resultsContainer');
  container.innerHTML = '';

  if (!results || Object.keys(results).length === 0) {
    container.innerHTML = '<p style="text-align: center; color: #6c757d; padding: 2rem;">–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>';
    return;
  }

  const table = document.createElement('table');
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const thead = document.createElement('thead');
  const headerRow = document.createElement('tr');
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
  Object.keys(results).forEach(modelName => {
    const th = document.createElement('th');
    th.textContent = getModelDisplayName(modelName);
    headerRow.appendChild(th);
  });
  
  thead.appendChild(headerRow);
  table.appendChild(thead);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
  const tbody = document.createElement('tbody');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
  const allFileNames = new Set();
  Object.values(results).forEach(modelResults => {
    modelResults.forEach(result => {
      allFileNames.add(result.original_filename);
    });
  });
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
  Array.from(allFileNames).sort().forEach(filename => {
    const row = document.createElement('tr');
    
    // –Ø—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    Object.keys(results).forEach(modelName => {
      const td = document.createElement('td');
      const modelResult = results[modelName].find(r => r.original_filename === filename);
      
      if (modelResult && modelResult.result_path) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è canvas
        const container = document.createElement('div');
        container.className = 'result-image-container';
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const originalImg = document.createElement('img');
        originalImg.src = originalImages[filename] || `/tmp/${filename}`;
        originalImg.alt = '–û—Ä–∏–≥–∏–Ω–∞–ª';
        originalImg.className = 'result-original-image';
        originalImg.style.display = 'none';
        
        // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const canvas = document.createElement('canvas');
        canvas.className = 'result-canvas';
        canvas.dataset.filename = filename;
        canvas.dataset.model = modelName;
        canvas.title = `${getModelDisplayName(modelName)} ‚Äî ${filename}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        canvas.onclick = (e) => {
          e.stopPropagation();
          openModalWithPanel(originalImages[filename] || `/tmp/${filename}`, filename, modelName);
        };
        
        const paramsDiv = document.createElement('div');
        paramsDiv.className = 'image-params';
        paramsDiv.textContent = `imgsz: ${currentParams.imgsz}, conf: ${currentParams.conf}, iou: ${currentParams.iou}`;
        
        container.appendChild(originalImg);
        container.appendChild(canvas);
        container.appendChild(paramsDiv);
        
        td.appendChild(container);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º canvas –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ DOM
        setTimeout(() => {
          initializeResultCanvas(canvas, originalImg, filename, modelName);
        }, 100);
      } else {
        td.className = 'empty-cell';
        td.textContent = '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
      }
      
      row.appendChild(td);
    });
    
    tbody.appendChild(row);
  });
  
  table.appendChild(tbody);
  container.appendChild(table);
}

function getModelDisplayName(modelName) {
  const displayNames = {
    'auto_damage_united_with_third_part_yolo_model': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (–ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å)',
    'auto_damage_yolo_first_part_model': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (—á–∞—Å—Ç—å 1)',
    'auto_damage_yolo_second_part_model': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (—á–∞—Å—Ç—å 2)',
    'auto_damage_yolo_third_part_model': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (—á–∞—Å—Ç—å 3)',
    'auto_damage_yolo_united_1_2_model': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (1+2 —á–∞—Å—Ç–∏)',
    'auto_parts_full_dataset_1': '–î–µ—Ç–∞–ª–∏ (–ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å)'
  };
  
  return displayNames[modelName] || modelName;
}

function openModal(imageSrc, filename, modelName) {
  const modal = document.getElementById('modal');
  const modalImage = document.getElementById('modalImage');
  const modalDetectionList = document.getElementById('modalDetectionList');
  
  modalImage.src = imageSrc;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  showModalDetections(filename, modelName);
  
  modal.classList.add('active');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  currentModalImage = {
    filename: filename,
    modelName: modelName,
    src: imageSrc
  };
}

function openModalWithPanel(imageSrc, filename, modelName) {
  openModal(imageSrc, filename, modelName);
}

function rgbToHex(r, g, b) {
  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
let currentModalDetections = [];
let hiddenModalDetections = new Set();
let modalDetectionColors = new Map(); // –ö—ç—à —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏



function showModalDetections(filename, modelName) {
  console.log(`–ü–æ–∫–∞–∑ –¥–µ—Ç–µ–∫—Ü–∏–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–ª—è: ${filename}, ${modelName}`);

  const modalDetectionList = document.getElementById('modalDetectionList');

  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
  const detections = detectionData?.[filename]?.[modelName] || [];
  console.log('üéØ –î–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑ detectionData:', detections);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ
  currentModalDetections = detections;
  hiddenModalDetections.clear();
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–π (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑ backend)
  modalDetectionColors.clear();
  detections.forEach((detection, index) => {
    let color = [0, 255, 0]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π
    if (detection.model_color && Array.isArray(detection.model_color)) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ backend
      color = [...detection.model_color]; // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
    }
    modalDetectionColors.set(index, color);
    console.log(`üé® –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ü–≤–µ—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ ${index}: ${detection.class_name} - [${color.join(', ')}]`);
  });

  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
  modalDetectionList.innerHTML = '';

  if (detections.length === 0) {
    modalDetectionList.innerHTML = '<p style="text-align: center; color: #6c757d; padding: 1rem;">–ù–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</p>';
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  detections.forEach((detection, index) => {
    const detectionButton = document.createElement('button');
    detectionButton.className = 'modal-detection-button';
    detectionButton.dataset.index = index;
    detectionButton.type = 'button';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–∑ –∫—ç—à–∞
    let color = '#00FF00'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π
    const cachedColor = modalDetectionColors.get(index);
    if (cachedColor) {
      color = rgbToHex(cachedColor[0], cachedColor[1], cachedColor[2]);
    }

    detectionButton.innerHTML = `
      <div class="modal-detection-color" style="background-color: ${color};"></div>
      <div class="modal-detection-info">
        <div class="modal-detection-label">${detection.class_name}</div>
        <div class="modal-detection-confidence">${(detection.confidence * 100).toFixed(1)}%</div>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    detectionButton.addEventListener('click', () => {
      console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–µ—Ç–µ–∫—Ü–∏–∏:', index, detection.class_name);
      toggleModalDetection(index, detectionButton);
    });

    modalDetectionList.appendChild(detectionButton);
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º canvas –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
  setTimeout(() => {
    initializeModalCanvas();
  }, 100);
}

function toggleModalDetection(index, detectionButton) {
  console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏:', index);
  
  if (detectionButton.classList.contains('hidden')) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
    detectionButton.classList.remove('hidden');
    hiddenModalDetections.delete(index);
    console.log('üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é:', index);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –Ω–∞ canvas
    toggleModalDetectionOnCanvas(index, true);
  } else {
    // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
    detectionButton.classList.add('hidden');
    hiddenModalDetections.add(index);
    console.log('üôà –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é:', index);
    
    // –£–¥–∞–ª—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é —Å canvas
    toggleModalDetectionOnCanvas(index, false);
  }
}

function initializeModalCanvas() {
  const canvas = document.getElementById('modalCanvas');
  const imgElement = document.getElementById('modalImage');
  
  if (!imgElement || !canvas) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω canvas –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    return;
  }

  console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas...');

  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (imgElement.complete && imgElement.naturalWidth > 0) {
    setupCanvas();
  } else {
    imgElement.onload = setupCanvas;
  }

  function setupCanvas() {
    console.log('üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas...');
    const ctx = canvas.getContext('2d');
    const imgRect = imgElement.getBoundingClientRect();
    
    console.log('üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imgRect.width, 'x', imgRect.height);
    
    canvas.width = imgRect.width;
    canvas.height = imgRect.height;
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas
    ctx.drawImage(imgElement, 0, 0, canvas.width, canvas.height);
    
    console.log('‚úÖ Canvas –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∏—Å—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏...');
    
    // –†–∏—Å—É–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
    drawDetectionsOnCanvas();
  }
}

function redrawModalCanvas() {
  const canvas = document.getElementById('modalCanvas');
  const imgElement = document.getElementById('modalImage');
  
  if (!canvas || !imgElement) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω canvas –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏');
    return;
  }

  console.log('üé® –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ canvas...');

  const ctx = canvas.getContext('2d');
  
  // –û—á–∏—â–∞–µ–º canvas
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  ctx.drawImage(imgElement, 0, 0, canvas.width, canvas.height);
  
  // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
  drawDetectionsOnCanvas();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ–≥–æ
function toggleModalDetectionOnCanvas(index, show) {
  const canvas = document.getElementById('modalCanvas');
  const imgElement = document.getElementById('modalImage');
  
  if (!canvas || !imgElement || !currentModalDetections[index]) {
    return;
  }

  const ctx = canvas.getContext('2d');
  const detection = currentModalDetections[index];
  
  if (show) {
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ
    console.log(`üé® –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é ${index}: ${detection.class_name}`);
    drawSingleDetection(ctx, detection, index);
  } else {
    // –£–¥–∞–ª—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å—é –æ–±–ª–∞—Å—Ç—å
    console.log(`üé® –£–¥–∞–ª—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é ${index}: ${detection.class_name}`);
    
    // –û—á–∏—â–∞–µ–º –≤–µ—Å—å canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    ctx.drawImage(imgElement, 0, 0, canvas.width, canvas.height);
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    currentModalDetections.forEach((det, idx) => {
      if (!hiddenModalDetections.has(idx)) {
        drawSingleDetection(ctx, det, idx);
      }
    });
  }
}

function drawSingleDetection(ctx, detection, index) {
  const bbox = detection.bbox;
  if (!bbox || bbox.length !== 4) {
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑ –∫—ç—à–∞
  let color = modalDetectionColors.get(index) || [0, 255, 0];
  const rgbColor = `rgb(${color[2]}, ${color[1]}, ${color[0]})`;

  const [x1, y1, x2, y2] = bbox;
  const width = x2 - x1;
  const height = y2 - y1;

  // –†–∏—Å—É–µ–º –º–∞—Å–∫—É –ü–ï–†–ï–î —Ä–∞–º–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (detection.mask_polygon && detection.mask_polygon.length > 0) {
    ctx.fillStyle = rgbColor + 'B3'; // 70% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ (B3 = 179 –≤ hex, –ø—Ä–∏–º–µ—Ä–Ω–æ 70%)
    ctx.beginPath();
    
    for (let i = 0; i < detection.mask_polygon.length; i += 2) {
      const x = detection.mask_polygon[i];
      const y = detection.mask_polygon[i + 1];
      
      if (i === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    }
    
    ctx.closePath();
    ctx.fill();
  }

  // –†–∏—Å—É–µ–º bounding box (—Ä–∞–º–∫—É) - —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç —á—Ç–æ –∏ –º–∞—Å–∫–∞
  ctx.strokeStyle = rgbColor;
  ctx.lineWidth = 3; // –î–µ–ª–∞–µ–º —Ä–∞–º–∫—É —Ç–æ–ª—â–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
  ctx.strokeRect(x1, y1, width, height);

  // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ–Ω–æ–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  const label = `${detection.class_name} ${(detection.confidence * 100).toFixed(1)}%`;
  ctx.font = 'bold 14px Arial'; // –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º
  const textMetrics = ctx.measureText(label);
  const textWidth = textMetrics.width;
  const textHeight = 16;
  
  // –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
  ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
  ctx.fillRect(x1, y1 - textHeight - 8, textWidth + 6, textHeight + 4);
  
  // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
  ctx.fillStyle = rgbColor;
  ctx.fillText(label, x1 + 3, y1 - 6);
  
  console.log(`üé® –ù–∞—Ä–∏—Å–æ–≤–∞–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è ${index}: ${detection.class_name} —Ü–≤–µ—Ç [${color.join(', ')}]`);
}



function drawDetectionsOnCanvas() {
  const canvas = document.getElementById('modalCanvas');
  
  if (!canvas || !currentModalDetections.length) {
    console.log('‚ùå –ù–µ—Ç canvas –∏–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è');
    return;
  }

  const ctx = canvas.getContext('2d');
  console.log('üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ canvas...');

  let drawnCount = 0;
  currentModalDetections.forEach((detection, index) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
    if (hiddenModalDetections.has(index)) {
      console.log(`üôà –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—É—é –¥–µ—Ç–µ–∫—Ü–∏—é ${index}: ${detection.class_name}`);
      return;
    }

    const bbox = detection.bbox;
    if (!bbox || bbox.length !== 4) {
      console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π bbox –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ ${index}`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑ –∫—ç—à–∞
    let color = modalDetectionColors.get(index) || [0, 255, 0];
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB –¥–ª—è canvas
    const rgbColor = `rgb(${color[2]}, ${color[1]}, ${color[0]})`;

    // –†–∏—Å—É–µ–º –º–∞—Å–∫—É –ü–ï–†–ï–î —Ä–∞–º–∫–æ–π (—á—Ç–æ–±—ã —Ä–∞–º–∫–∞ –±—ã–ª–∞ –ø–æ–≤–µ—Ä—Ö)
    if (detection.mask_polygon && detection.mask_polygon.length > 0) {
      ctx.fillStyle = rgbColor + 'B3'; // 70% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
      ctx.beginPath();
      
      for (let i = 0; i < detection.mask_polygon.length; i += 2) {
        const x = detection.mask_polygon[i];
        const y = detection.mask_polygon[i + 1];
        
        if (i === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      }
      
      ctx.closePath();
      ctx.fill();
    }

    // –†–∏—Å—É–µ–º bounding box
    const [x1, y1, x2, y2] = bbox;
    const width = x2 - x1;
    const height = y2 - y1;

    ctx.strokeStyle = rgbColor;
    ctx.lineWidth = 2;
    ctx.strokeRect(x1, y1, width, height);

    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ–Ω–æ–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    const label = `${detection.class_name} ${(detection.confidence * 100).toFixed(1)}%`;
    
    // –ò–∑–º–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    ctx.font = '14px Arial';
    const textMetrics = ctx.measureText(label);
    const textWidth = textMetrics.width;
    const textHeight = 14;
    
    // –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(x1, y1 - textHeight - 5, textWidth + 4, textHeight + 2);
    
    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
    ctx.fillStyle = rgbColor;
    ctx.fillText(label, x1 + 2, y1 - 5);

    drawnCount++;
    console.log(`‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è ${index}: ${detection.class_name}`);
  });

  console.log(`üé® –í—Å–µ–≥–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ –¥–µ—Ç–µ–∫—Ü–∏–π: ${drawnCount}`);
}

function initializeResultCanvas(canvas, originalImg, filename, modelName) {
  console.log(`üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas –¥–ª—è ${filename}, ${modelName}`);
  
  if (!canvas || !originalImg) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω canvas –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    return;
  }

  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (originalImg.complete && originalImg.naturalWidth > 0) {
    setupResultCanvas();
  } else {
    originalImg.onload = setupResultCanvas;
  }

  function setupResultCanvas() {
    console.log(`üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas –¥–ª—è ${filename}...`);
    const ctx = canvas.getContext('2d');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imgWidth = originalImg.naturalWidth;
    const imgHeight = originalImg.naturalHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 300x300)
    const maxSize = 300;
    let displayWidth = imgWidth;
    let displayHeight = imgHeight;
    
    if (imgWidth > maxSize || imgHeight > maxSize) {
      const ratio = Math.min(maxSize / imgWidth, maxSize / imgHeight);
      displayWidth = imgWidth * ratio;
      displayHeight = imgHeight * ratio;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    canvas.width = displayWidth;
    canvas.height = displayHeight;
    
    console.log(`üìê –†–∞–∑–º–µ—Ä—ã canvas: ${displayWidth} x ${displayHeight}`);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas
    ctx.drawImage(originalImg, 0, 0, displayWidth, displayHeight);
    
    // –†–∏—Å—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏
    drawResultDetections(canvas, filename, modelName, imgWidth, imgHeight, displayWidth, displayHeight);
  }
}

function drawResultDetections(canvas, filename, modelName, originalWidth, originalHeight, displayWidth, displayHeight) {
  const ctx = canvas.getContext('2d');
  const detections = detectionData?.[filename]?.[modelName] || [];
  
  if (!detections.length) {
    console.log(`‚ùå –ù–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è ${filename}, ${modelName}`);
    return;
  }
  
  console.log(`üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ ${detections.length} –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è ${filename}, ${modelName}`);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–±
  const scaleX = displayWidth / originalWidth;
  const scaleY = displayHeight / originalHeight;
  
  detections.forEach((detection, index) => {
    const bbox = detection.bbox;
    if (!bbox || bbox.length !== 4) {
      console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π bbox –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ ${index}`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏
    let color = [0, 255, 0]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π
    if (detection.model_color && Array.isArray(detection.model_color)) {
      color = detection.model_color;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB –¥–ª—è canvas
    const rgbColor = `rgb(${color[2]}, ${color[1]}, ${color[0]})`;

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const [x1, y1, x2, y2] = bbox.map((coord, i) => 
      i % 2 === 0 ? coord * scaleX : coord * scaleY
    );
    
    const width = x2 - x1;
    const height = y2 - y1;

    // –†–∏—Å—É–µ–º bounding box
    ctx.strokeStyle = rgbColor;
    ctx.lineWidth = Math.max(1, 2 * Math.min(scaleX, scaleY));
    ctx.strokeRect(x1, y1, width, height);

    // –†–∏—Å—É–µ–º –º–∞—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (detection.mask_polygon && detection.mask_polygon.length > 0) {
      ctx.fillStyle = rgbColor + 'B3'; // 70% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
      ctx.beginPath();
      
      for (let i = 0; i < detection.mask_polygon.length; i += 2) {
        const x = detection.mask_polygon[i] * scaleX;
        const y = detection.mask_polygon[i + 1] * scaleY;
        
        if (i === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      }
      
      ctx.closePath();
      ctx.fill();
    }

    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    const label = `${detection.class_name} ${(detection.confidence * 100).toFixed(1)}%`;
    ctx.fillStyle = rgbColor;
    ctx.font = `${Math.max(10, 14 * Math.min(scaleX, scaleY))}px Arial`;
    ctx.fillText(label, x1, y1 - 5);

    console.log(`‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è ${index}: ${detection.class_name}`);
  });
  
  console.log(`üé® –í—Å–µ–≥–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ –¥–µ—Ç–µ–∫—Ü–∏–π: ${detections.length}`);
}

function openDetectionPanel(filename, modelName) {
  console.log(`–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–ª—è: ${filename}, ${modelName}`);
  
  const detectionList = document.getElementById('detectionList');
  const detections = detectionData[filename]?.[modelName] || [];
  
  if (detections.length === 0) {
    detectionList.innerHTML = '<p style="text-align: center; color: #6c757d; padding: 1rem;">–ù–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</p>';
    return;
  }
  
  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
  detectionList.innerHTML = '';
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (!filteredImages[filename]) {
    filteredImages[filename] = {};
  }
  if (!filteredImages[filename][modelName]) {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–∏–¥–∏–º—ã
    filteredImages[filename][modelName] = new Set(detections.map((_, i) => i));
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–æ–¥–µ–ª–∏
  let modelColor = '#00FF00'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π
  if (modelName.includes('damage')) {
    modelColor = '#00FF00'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
  } else if (modelName.includes('parts')) {
    modelColor = '#FF0000'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
  } else if (modelName === 'combined') {
    // –î–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    modelColor = '#00FF00'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π
  }
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  detections.forEach((detection, index) => {
    const detectionItem = document.createElement('div');
    detectionItem.className = 'detection-item';
    
    const isVisible = filteredImages[filename][modelName].has(index);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ü–≤–µ—Ç –º–æ–¥–µ–ª–∏
    let color = modelColor;
    if (detection.model_color) {
      if (Array.isArray(detection.model_color)) {
        // RGB –∫–æ—Ä—Ç–µ–∂ [r, g, b]
        color = rgbToHex(detection.model_color[0], detection.model_color[1], detection.model_color[2]);
      } else if (typeof detection.model_color === 'string') {
        color = detection.model_color;
      }
    }
    
    detectionItem.innerHTML = `
      <div class="detection-color" style="background-color: ${color};"></div>
      <div class="detection-info">
        <div class="detection-label">${detection.class_name}</div>
        <div class="detection-confidence">${(detection.confidence * 100).toFixed(1)}%</div>
      </div>
      <div class="detection-toggle">
        <input type="checkbox" ${isVisible ? 'checked' : ''} 
               onchange="toggleDetection('${filename}', '${modelName}', ${index}, this.checked)">
      </div>
    `;
    
    detectionList.appendChild(detectionItem);
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
  const detectionPanel = document.getElementById('detectionPanel');
  detectionPanel.classList.add('active');
}

function getDetectionColor(index) {
  const colors = [
    '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
    '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'
  ];
  return colors[index % colors.length];
}

function toggleDetection(filename, modelName, detectionIndex, visible) {
  console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: ${filename}, ${modelName}, –∏–Ω–¥–µ–∫—Å ${detectionIndex}, –≤–∏–¥–∏–º–æ—Å—Ç—å: ${visible}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  const detections = detectionData[filename]?.[modelName] || [];
  
  if (detections.length === 0) {
    console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (!filteredImages[filename]) {
    filteredImages[filename] = {};
  }
  if (!filteredImages[filename][modelName]) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–∏–º—ã–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è–º–∏
    filteredImages[filename][modelName] = new Set(detections.map((_, i) => i));
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
  if (visible) {
    filteredImages[filename][modelName].add(detectionIndex);
  } else {
    filteredImages[filename][modelName].delete(detectionIndex);
  }
  
  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  redrawFilteredImage(filename, modelName);
}

function redrawFilteredImage(filename, modelName) {
  // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  const resultImagePath = resultImages[filename]?.[modelName];
  if (!resultImagePath) {
    console.log('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  const detections = detectionData[filename]?.[modelName] || [];
  const visibleDetections = filteredImages[filename]?.[modelName] || new Set();
  
  // –ï—Å–ª–∏ –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–∏–¥–∏–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  if (visibleDetections.size === detections.length) {
    updateModalAndTableImages(filename, modelName, resultImagePath);
    return;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (visibleDetections.size === 0) {
    const originalImagePath = originalImages[filename];
    if (originalImagePath) {
      updateModalAndTableImages(filename, modelName, originalImagePath);
    }
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
  const originalImg = new Image();
  originalImg.onload = function() {
    canvas.width = originalImg.width;
    canvas.height = originalImg.height;
    
    // –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    ctx.drawImage(originalImg, 0, 0);
    
    // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    detections.forEach((detection, index) => {
      if (visibleDetections.has(index)) {
        const bbox = detection.bbox;
        const x1 = bbox[0];
        const y1 = bbox[1];
        const x2 = bbox[2];
        const y2 = bbox[3];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –º–æ–¥–µ–ª–∏
        let color = '#00FF00'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π
        if (detection.model_color) {
          if (Array.isArray(detection.model_color)) {
            // RGB –∫–æ—Ä—Ç–µ–∂ [r, g, b]
            color = rgbToHex(detection.model_color[0], detection.model_color[1], detection.model_color[2]);
          } else if (typeof detection.model_color === 'string') {
            color = detection.model_color;
          }
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ä–∏—Å—É–µ–º –µ—ë
        if (detection.mask_polygon) {
          const maskPolygon = detection.mask_polygon;
          if (maskPolygon.length > 0) {
            // –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –º–∞—Å–∫–∏
            ctx.beginPath();
            for (let j = 0; j < maskPolygon.length; j += 2) {
              if (j === 0) {
                ctx.moveTo(maskPolygon[j], maskPolygon[j + 1]);
              } else {
                ctx.lineTo(maskPolygon[j], maskPolygon[j + 1]);
              }
            }
            ctx.closePath();
            
            // –†–∏—Å—É–µ–º –∑–∞–ª–∏–≤–∫—É –º–∞—Å–∫–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            ctx.fillStyle = color + '4D'; // 30% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            ctx.fill();
          }
        }
        
        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É
        ctx.strokeStyle = color;
        ctx.lineWidth = 2;
        ctx.strokeRect(x1, y1, x2 - x1, y2 - y1);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ–Ω–æ–º
        const label = `${detection.class_name} ${(detection.confidence * 100).toFixed(1)}%`;
        
        // –ò–∑–º–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        ctx.font = '12px Arial';
        const textMetrics = ctx.measureText(label);
        const textWidth = textMetrics.width;
        const textHeight = 12;
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤–∏–¥–µ–Ω
        let textX = x1;
        let textY = y1 - 5;
        
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ
        if (textY < textHeight) {
          textY = y2 + textHeight + 5; // –ü–æ–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥ –æ–±—ä–µ–∫—Ç
        }
        if (textX + textWidth > originalImg.width) {
          textX = originalImg.width - textWidth - 5;
        }
        if (textX < 0) {
          textX = 5;
        }
        
        // –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        ctx.fillStyle = color;
        ctx.fillRect(textX, textY - textHeight, textWidth + 4, textHeight + 2);
        
        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        ctx.fillStyle = '#000000';
        ctx.fillText(label, textX + 2, textY - 2);
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    updateModalAndTableImages(filename, modelName, canvas.toDataURL());
  };
  
  originalImg.crossOrigin = 'anonymous';
  originalImg.src = originalImages[filename];
}

function updateModalAndTableImages(filename, modelName, imageSrc) {
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  const modalImage = document.getElementById('modalImage');
  if (modalImage && currentModalImage && 
      currentModalImage.filename === filename && 
      currentModalImage.modelName === modelName) {
    modalImage.src = imageSrc;
    // –û–±–Ω–æ–≤–ª—è–µ–º src –≤ currentModalImage
    currentModalImage.src = imageSrc;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  updateResultImage(filename, modelName, imageSrc);
}

function updateResultImage(filename, modelName, newImageSrc) {
  // –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
  const resultImages = document.querySelectorAll(`img[alt*="${filename}"][alt*="${getModelDisplayName(modelName)}"]`);
  resultImages.forEach(img => {
    img.src = newImageSrc;
  });
}
